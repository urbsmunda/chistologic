name: Terraform Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

permissions:
  id-token: write   # OIDC-token from GitHub
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VERSION: "1.5.7"
  TF_BUCKET:  "chistologic-tfstate"     # имя S3‑бакета с state
  YC_CLOUD_ID:  ${{ secrets.YANDEX_CLOUD_ID }}
  YC_FOLDER_ID: ${{ secrets.YANDEX_FOLDER_ID }}

jobs:
  terraform:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # ---------------- OIDC‑аутентификация в Yandex Cloud -----------------
    - name: YC OIDC auth
      id: yc-auth
      uses: docker://ghcr.io/yc-actions/yc-iam-token-fed:1.0.0
      with:
        yc-sa-id:        ${{ vars.YC_SA_ID }}          # ajeqqgdnr35kvd9ik9h4
        yc-federation-id:${{ vars.YC_FEDERATION_ID }}  # ajeilhvvaqck9uncqplp

    # Пробрасываем YC_TOKEN во все последующие shell‑команды
    - name: Export YC_TOKEN
      run: echo "YC_TOKEN=${{ steps.yc-auth.outputs.token }}" >> $GITHUB_ENV

    # ---------------- Terraform Init/Plan (+ Apply на main) -------------
    - name: Terraform Init
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ env.TF_BUCKET }}" \
          -backend-config="key=${{ github.ref_name }}.tfstate" \
          -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

    - name: Terraform Plan
      run: terraform plan -input=false -out=tfplan

    - name: Terraform Apply (main only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -input=false -auto-approve tfplan
